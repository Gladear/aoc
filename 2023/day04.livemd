# Day 04

```elixir
Mix.install(kino: "~> 0.11")
```

## Common

```elixir
import Kino.Shorts

input = read_textarea("Puzzle input", monospace: true)
lines = String.split(input, "\n", trim: true)
cards = Enum.map(lines, &Card.parse/1)
```

```elixir
defmodule Card do
  defstruct [:id, :winning, :numbers]

  def parse(entry) do
    [card_str, all_numbers] = String.split(entry, ":")

    id = parse_id(card_str)

    [winning, numbers] =
      all_numbers
      |> String.split("|", parts: 2)
      |> Enum.map(&parse_numbers/1)

    %__MODULE__{
      id: id,
      winning: winning,
      numbers: numbers
    }
  end

  defp parse_id(card_str) do
    [_game, id_str] = String.split(card_str)
    String.to_integer(id_str)
  end

  defp parse_numbers(numbers) do
    numbers
    |> String.split()
    |> Enum.map(&String.to_integer/1)
  end

  def count_winning(card) do
    Enum.count(card.numbers, fn number ->
      number in card.winning
    end)
  end
end
```

## Part 1

```elixir
cards
|> Stream.map(&Card.count_winning/1)
|> Stream.map(fn
  0 -> 0
  count -> Integer.pow(2, count - 1)
end)
|> Enum.sum()
```

## Part 2

```elixir
cards
|> Stream.transform([1], fn card, multipliers ->
  [multiplier | others] =
    case multipliers do
      [] -> [1]
      other -> other
    end

  count_winning = Card.count_winning(card)

  {to_update, staying} = Enum.split(others, count_winning)

  updated =
    to_update
    # ensure length
    |> Stream.concat(Stream.repeatedly(fn -> 1 end))
    |> Stream.take(count_winning)
    # incr each
    |> Enum.map(&(&1 + multiplier))

  {[multiplier], updated ++ staying}
end)
|> Enum.sum()
```
